tenets:
  - import: codelingo/go
  - import: codelingo/effective-go
  - import: codelingo/code-review-comments
  - name: omit-len-when-slicing
    flows:
      codelingo/rewrite:
      codelingo/review:
        comment: You can omit the second index value when slicing to the end of a slice.
    query: |
      import codelingo/ast/go

      @review comment
      go.slice_expr(depth = any):
        go.ident:
          name as sliceName
        @rewrite --replace ""
        go.call_expr:
          go.ident:
            name == "len"
          go.args:
            child_count == 1
            go.ident:
              name == sliceName
  - name: find-funcs
    flows:
      codelingo/rewrite:
      codelingo/review:
        comment: This is a function, {{pub}} but you probably already knew that.
    query: |
      import codelingo/ast/go

      @review comment
      @rewrite --replace "{{ replace(a, b, pub) }}"
      go.binary_expr(depth = any):
        go.call_expr:
          go.selector_expr:
            go.ident:
              name == "strings"
            go.ident:
              name == "Index"
          go.args:
            any_of:
              go.ident:
                sibling_order == 0
                type as pub
                name as a
              go.basic_lit:
                sibling_order == 0
                value as a
            any_of:
              go.ident:
                sibling_order == 1
                type as pub
                name as b
              go.basic_lit:
                sibling_order == 1
                value as b
        go.unary_expr:
          op == "-"
          go.basic_lit:
            value == 1
  - name: repeated-string-literal
    flows:
      codelingo/review:
        comment: This is a repeated string literal. Consider replacing with a string constant.
    query: |
      import codelingo/ast/go

      @review comment
      go.basic_lit(depth = any):
        type == "string"
        value as strValue
      go.basic_lit(depth = any):
        type == "string"
        value == strValue
  - name: single-func-returns-nil
    flows:
      codelingo/review:
        comment: This function ends with a call to a function with a single return value. You can just return the call instead.
    query: |
      import codelingo/ast/go

      go.decls(depth = any):
        @review comment
        go.func_decl(depth = any):          
          go.block_stmt:
            go.list:
              any_of:
                go.assign_stmt(depth = any):
                  sibling_order as so
                  go.lhs:
                    child_count == 1
                    go.ident:
                      name == "err"
                  go.rhs:
                    go.call_expr
                go.if_stmt:
                  sibling_order as so
                  go.assign_stmt(depth = any):
                    go.lhs:
                      child_count == 1
                      go.ident:
                        name == "err"
                    go.rhs:
                      go.call_expr
                  go.binary_expr:
                    go.ident:
                      name == "err"
                    go.ident:
                      name == "nil"
              go.return_stmt(depth = any):
                sibling_order as sor
                isOneAfter(so, sor)
                go.results:
                  child_count == 1
                  any_of:
                    go.ident:
                      name == "err"
                    go.ident:
                      name == "nil"

